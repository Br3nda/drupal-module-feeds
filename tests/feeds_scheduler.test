<?php
// $Id: feeds_scheduler.test,v 1.2 2010/09/11 22:23:02 alexb Exp $

/**
 * @file
 * Feeds tests.
 */

// Require FeedsWebTestCase class definition.
require_once(dirname(__FILE__) .'/feeds.test.inc');

/**
 * Test cron scheduling.
 */
class FeedsSchedulerTestCase extends FeedsWebTestCase {

  /**
   * Describe this test.
   */
  public function getInfo() {
    return array(
      'name' => t('Scheduler'),
      'description' => t('Tests for feeds scheduler.'),
      'group' => t('Feeds'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp('feeds', 'feeds_ui', 'ctools');
    $this->drupalLogin(
      $this->drupalCreateUser(
        array(
          'administer feeds', 'administer nodes',
        )
      )
    );
    $this->createImporterConfiguration();
    $this->addMappings('syndication',
      array(
        array(
          'source' => 'title',
          'target' => 'title',
          'unique' => FALSE,
        ),
        array(
          'source' => 'description',
          'target' => 'body',
          'unique' => FALSE,
        ),
        array(
          'source' => 'timestamp',
          'target' => 'created',
          'unique' => FALSE,
        ),
        array(
          'source' => 'url',
          'target' => 'url',
          'unique' => TRUE,
        ),
        array(
          'source' => 'guid',
          'target' => 'guid',
          'unique' => TRUE,
        ),
      )
    );
  }

  /**
   * Test scheduling on cron.
   */
  public function testScheduling() {
    // Create 10 feed nodes. Turn off import on create before doing that.
    $edit = array(
      'import_on_create' => FALSE,
    );
    $this->drupalPost('admin/build/feeds/edit/syndication/settings', $edit, 'Save');
    $this->assertText('Do not import on create');

    $nids = $this->createFeedNodes();
    // This implicitly tests the import_on_create node setting being 0.
    $this->assertTrue($nids[0] == 1 && $nids[1] == 2, 'Node ids sequential.');

    // Log out and run cron twice.
    $this->drupalLogout();
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');

    // There should be feeds_schedule_num (= 10) feeds updated now.
    $schedule = array();
    $count = db_result(db_query("SELECT COUNT(*) FROM {feeds_schedule} WHERE last_executed_time <> 0"));
    $this->assertEqual($count, 10, '10 feeds refreshed on cron.');

    // There should be 100 story nodes in the database.
    $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story'"));
    $this->assertEqual($count, 100, 'There are 100 story nodes aggregated.');

    // Hit twice cron again.
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');

    // There should be feeds_schedule_num X 2 (= 20) feeds updated now.
    $schedule = array();
    $result = db_query("SELECT feed_nid, last_executed_time, scheduled FROM {feeds_schedule} WHERE last_executed_time <> 0");
    while ($row = db_fetch_object($result)) {
      $schedule[$row->feed_nid] = $row;
    }
    $this->assertEqual(count($schedule), 20, '20 feeds refreshed on cron.');

    // There should be 200 story nodes in the database.
    $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story' AND status = 1"));
    $this->assertEqual($count, 200, 'There are 200 story nodes aggregated.');

    // There shouldn't be any items with scheduled = 1 now, if so, this would
    // mean they are stuck.
    $count = db_result(db_query("SELECT COUNT(*) FROM {feeds_schedule} WHERE scheduled = 1"));
    $this->assertEqual($count, 0, 'All items are unscheduled (schedule flag = 0).');

    // Hit cron again twice.
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');

    // The import_period setting of the feed configuration is 1800, there
    // shouldn't be any change to the database now.
    $equal = TRUE;
    $result = db_query("SELECT feed_nid, last_executed_time, scheduled FROM {feeds_schedule} WHERE last_executed_time <> 0");
    while ($row = db_fetch_object($result)) {
      $equal = $equal && ($row->last_executed_time == $schedule[$row->feed_nid]->last_executed_time);
    }
    $this->assertTrue($equal, 'Schedule did not change.');

    // Log back in and set refreshing to as often as possible.
    $this->drupalLogin(
      $this->drupalCreateUser(
        array(
          'administer feeds', 'administer nodes',
        )
      )
    );
    $edit = array(
      'import_period' => 0,
    );
    $this->drupalPost('admin/build/feeds/edit/syndication/settings', $edit, 'Save');
    $this->assertText('Refresh: as often as possible');

    // Hit cron again, 4 times now.
    for ($i = 0; $i < 4; $i++) {
      $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
    }

    // Refresh period is set to 'as often as possible'. All scheduled times
    // should have changed now.
    // There should not be more nodes than before.
    $equal = FALSE;
    $output = '';
    $result = db_query("SELECT feed_nid, last_executed_time, scheduled FROM {feeds_schedule} WHERE last_executed_time <> 0");
    while ($row = db_fetch_object($result)) {
      $equal = $equal || ($row->last_executed_time == $schedule[$row->feed_nid]->last_executed_time);
    }
    $this->assertFalse($equal, 'Every feed schedule time changed.');

    // There should be 200 story nodes in the database.
    $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story' AND status = 1"));
    $this->assertEqual($count, 200, 'The total of 200 story nodes has not changed.');
  }

  /**
   * Test batching on cron.
   */
  function testBatching() {
    // Verify that there are 150 nodes total.
    $nid = $this->createFeedNode('syndication', $GLOBALS['base_url'] .'/'. drupal_get_path('module', 'feeds') .'/tests/feeds/many_items.rss2');
    $this->assertText('Created 150 Story nodes.');
    $this->drupalPost('node/'. $nid .'/delete-items', array(), 'Delete');
    $this->assertText('Deleted 150 nodes.');

    // Hit cron 3 times, assert correct number of story nodes.
    for ($i = 0; $i < 3; $i++) {
      $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
      // 50 == FEEDS_NODE_BATCH_SIZE
      $this->assertEqual(50 * ($i + 1), db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story'")));
    }

    // Delete a couple of nodes, then hit cron again. They should not be replaced
    // as the minimum update time is 30 minutes.
    $result = db_query_range("SELECT nid FROM {node} WHERE type = 'story'", 0, 2);
    while ($node = db_fetch_object($result)) {
      $this->drupalPost("node/{$node->nid}/delete", array(), 'Delete');
    }
    $this->assertEqual(148, db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story'")));
    $this->drupalGet($GLOBALS['base_url'] .'/cron.php');
    $this->assertEqual(148, db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = 'story'")));
  }
}
